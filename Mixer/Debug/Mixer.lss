
Mixer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006c8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be5  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00001449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000567  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 04 01 	call	0x208	; 0x208 <main>
  9e:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <RotaryInit>:
uint8_t rotarycount = 0;

void RotaryInit(void)
{
	//set pins as input
	ROTDDR &= ~((1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON));
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8c 7e       	andi	r24, 0xEC	; 236
  aa:	87 b9       	out	0x07, r24	; 7
	//enable internal pull-ups for rotary and pots
	ROTPORT |= (1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON)|(1<<PORTC2)|(1<<PORTC3);;
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8f 61       	ori	r24, 0x1F	; 31
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <RotaryCheckStatus>:
}

void RotaryCheckStatus(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <RotaryCheckStatus+0x6>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	//reading rotary and button
	//check if rotation is left
	if(ROTA & (!wait))
  be:	96 b1       	in	r25, 0x06	; 6
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
  cc:	21 11       	cpse	r18, r1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	89 23       	and	r24, r25
  d2:	19 f0       	breq	.+6      	; 0xda <RotaryCheckStatus+0x26>
	wait=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if (ROTB & ROTA & (wait))
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	26 b1       	in	r18, 0x06	; 6
  de:	86 95       	lsr	r24
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	89 27       	eor	r24, r25
  e4:	92 27       	eor	r25, r18
  e6:	91 70       	andi	r25, 0x01	; 1
  e8:	89 23       	and	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end>
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	84 23       	and	r24, r20
  f4:	95 23       	and	r25, r21
  f6:	89 2b       	or	r24, r25
  f8:	31 f0       	breq	.+12     	; 0x106 <RotaryCheckStatus+0x52>
	{
		rotarystatus=2;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		wait=2;
 100:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 104:	14 c0       	rjmp	.+40     	; 0x12e <RotaryCheckStatus+0x7a>
	}
	else if(ROTA & (!ROTB) & wait)
 106:	96 b1       	in	r25, 0x06	; 6
 108:	26 b1       	in	r18, 0x06	; 6
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	89 27       	eor	r24, r25
 10e:	26 95       	lsr	r18
 110:	21 70       	andi	r18, 0x01	; 1
 112:	98 2f       	mov	r25, r24
 114:	92 23       	and	r25, r18
 116:	89 2f       	mov	r24, r25
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	84 23       	and	r24, r20
 11c:	95 23       	and	r25, r21
 11e:	89 2b       	or	r24, r25
 120:	31 f0       	breq	.+12     	; 0x12e <RotaryCheckStatus+0x7a>
	{
		rotarystatus=1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		wait=2;		
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
	if ((!ROTA)&!(ROTB)&(wait==2))
 12e:	96 b1       	in	r25, 0x06	; 6
 130:	86 b1       	in	r24, 0x06	; 6
 132:	86 95       	lsr	r24
 134:	81 70       	andi	r24, 0x01	; 1
 136:	89 23       	and	r24, r25
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 13e:	22 30       	cpi	r18, 0x02	; 2
 140:	09 f0       	breq	.+2      	; 0x144 <RotaryCheckStatus+0x90>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	88 23       	and	r24, r24
 146:	19 f0       	breq	.+6      	; 0x14e <RotaryCheckStatus+0x9a>
 148:	91 11       	cpse	r25, r1
	wait=0;
 14a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	//check button status
	if (ROTCLICK)
 14e:	34 99       	sbic	0x06, 4	; 6
 150:	12 c0       	rjmp	.+36     	; 0x176 <RotaryCheckStatus+0xc2>
	{
		for(volatile uint16_t x=0;x<0x0FFF;x++);
 152:	1a 82       	std	Y+2, r1	; 0x02
 154:	19 82       	std	Y+1, r1	; 0x01
 156:	05 c0       	rjmp	.+10     	; 0x162 <RotaryCheckStatus+0xae>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	9f 40       	sbci	r25, 0x0F	; 15
 16a:	b0 f3       	brcs	.-20     	; 0x158 <RotaryCheckStatus+0xa4>
		if (ROTCLICK)
 16c:	34 99       	sbic	0x06, 4	; 6
 16e:	03 c0       	rjmp	.+6      	; 0x176 <RotaryCheckStatus+0xc2>
		rotarystatus=3;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		
	}
}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <RotaryGetStatus>:

//return button status
uint8_t RotaryGetStatus(void)
{
	return rotarystatus;
}
 180:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rotarystatus>
 184:	08 95       	ret

00000186 <RotaryResetStatus>:
//reset status
void RotaryResetStatus(void)
{
	rotarystatus=0;
 186:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rotarystatus>
 18a:	08 95       	ret

0000018c <USART_init>:
void USART_init()
{
	unsigned int UBRR_val = (((F_CPU/(16*BAUD)))-1);
	
	//Configure baud rate
	UBRR0L = UBRR_val;
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = UBRR_val >> 8;
 192:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	//Set transmit bit
	UCSR0B |= (1 << TXEN0);
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <USART_TX>:
	}	
}

void USART_TX(char single)
{
	while((UCSR0A & (1<<UDRE0))==0);
 1a8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ac:	95 ff       	sbrs	r25, 5
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <USART_TX>
	UDR0 = single;
 1b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b4:	08 95       	ret

000001b6 <USART_TXST>:
	
}


void USART_TXST(char * volumo)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 1be:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(volumo[i] != '\0')
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <USART_TXST+0x12>
	{
		USART_TX(volumo[i]);
 1c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_TX>
		
		i++;
 1c6:	cf 5f       	subi	r28, 0xFF	; 255

void USART_TXST(char * volumo)
{
	unsigned char i = 0;
	
	while(volumo[i] != '\0')
 1c8:	f8 01       	movw	r30, r16
 1ca:	ec 0f       	add	r30, r28
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 81       	ld	r24, Z
 1d0:	81 11       	cpse	r24, r1
 1d2:	f7 cf       	rjmp	.-18     	; 0x1c2 <USART_TXST+0xc>
	{
		USART_TX(volumo[i]);
		
		i++;
	}	
}
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <converto>:
}


int converto(int val)
{
	return ((val*100.0)/1023);
 1dc:	bc 01       	movw	r22, r24
 1de:	99 0f       	add	r25, r25
 1e0:	88 0b       	sbc	r24, r24
 1e2:	99 0b       	sbc	r25, r25
 1e4:	0e 94 34 02 	call	0x468	; 0x468 <__floatsisf>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	48 ec       	ldi	r20, 0xC8	; 200
 1ee:	52 e4       	ldi	r21, 0x42	; 66
 1f0:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 ec       	ldi	r19, 0xC0	; 192
 1f8:	4f e7       	ldi	r20, 0x7F	; 127
 1fa:	54 e4       	ldi	r21, 0x44	; 68
 1fc:	0e 94 8a 01 	call	0x314	; 0x314 <__divsf3>
 200:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fixsfsi>
}
 204:	cb 01       	movw	r24, r22
 206:	08 95       	ret

00000208 <main>:


int main(void)
{	
	//Initialize the input pins for the rotary encoder
    RotaryInit();
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <RotaryInit>
	//Initialize USART  
    USART_init();
 20c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_init>
	//Enable ADC pin
    ADCSRA = (1 << ADEN);
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//DDRC |= (0<<PORTC2) | (0<<PORTC3);
	
    while(1)
    {
		
		RotaryCheckStatus();
 216:	0e 94 5a 00 	call	0xb4	; 0xb4 <RotaryCheckStatus>
		if(RotaryGetStatus() == 2)
 21a:	0e 94 c0 00 	call	0x180	; 0x180 <RotaryGetStatus>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	31 f4       	brne	.+12     	; 0x22e <main+0x26>
		{
			rotaryval--;
 222:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 226:	81 50       	subi	r24, 0x01	; 1
 228:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x38>
		}
		else if(RotaryGetStatus() == 1)
 22e:	0e 94 c0 00 	call	0x180	; 0x180 <RotaryGetStatus>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	29 f4       	brne	.+10     	; 0x240 <main+0x38>
		{
			rotaryval++;
 236:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
		}
		
			
		if(rotaryval < 0)
 240:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 244:	88 23       	and	r24, r24
 246:	1c f4       	brge	.+6      	; 0x24e <main+0x46>
		{
			rotaryval = 0;
 248:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rotaryval>
 24c:	05 c0       	rjmp	.+10     	; 0x258 <main+0x50>
		}
		else if(rotaryval > 100)
 24e:	85 36       	cpi	r24, 0x65	; 101
 250:	1c f0       	brlt	.+6      	; 0x258 <main+0x50>
		{
			rotaryval = 100;
 252:	84 e6       	ldi	r24, 0x64	; 100
 254:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
		}
		
		//Convert rotaryval to a USART transmittable string	
		itoa(rotaryval, mixer_vol, 10);
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 25c:	4a e0       	ldi	r20, 0x0A	; 10
 25e:	6e e0       	ldi	r22, 0x0E	; 14
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	08 2e       	mov	r0, r24
 264:	00 0c       	add	r0, r0
 266:	99 0b       	sbc	r25, r25
 268:	0e 94 2d 03 	call	0x65a	; 0x65a <__itoa_ncheck>
		USART_TXST(mixer_vol);
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_TXST>
		USART_TX('|');
 274:	8c e7       	ldi	r24, 0x7C	; 124
 276:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_TX>
		RotaryResetStatus();
 27a:	0e 94 c3 00 	call	0x186	; 0x186 <RotaryResetStatus>
		
		//Only go to channel A4
		while(channel <= 4)
 27e:	3a c0       	rjmp	.+116    	; 0x2f4 <main+0xec>
		{
			ADCSRA = (1 << ADEN);
 280:	80 e8       	ldi	r24, 0x80	; 128
 282:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
			ADMUX = (1 << REFS0) | (0 << REFS1) | channel;
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			
			//noisy ADC pins lead to stupid ADC values
			//for some fucking reason you need to dump the ADC value TWICE
			for (int i=0; i < 2; i++)
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <main+0xae>
			{
				//Start ADC Conversion
				ADCSRA |= (1 << ADSC);
 296:	ea e7       	ldi	r30, 0x7A	; 122
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24
				//ADMUX |= (channel << 1);
				//while(ADCSRA & (1<<ADSC));
				//Wait till conversion is complete
				while((ADCSRA & 1 << ADIF) == 0);
 2a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2a4:	84 ff       	sbrs	r24, 4
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <main+0x98>
				ADCSRA |= (1<<ADIF);
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	80 83       	st	Z, r24
			ADCSRA = (1 << ADEN);
			ADMUX = (1 << REFS0) | (0 << REFS1) | channel;
			
			//noisy ADC pins lead to stupid ADC values
			//for some fucking reason you need to dump the ADC value TWICE
			for (int i=0; i < 2; i++)
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	22 30       	cpi	r18, 0x02	; 2
 2b8:	31 05       	cpc	r19, r1
 2ba:	6c f3       	brlt	.-38     	; 0x296 <main+0x8e>
				while((ADCSRA & 1 << ADIF) == 0);
				ADCSRA |= (1<<ADIF);
			}
						
			
			vol = converto(ADC);
 2bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <converto>
 2c8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <vol>
 2cc:	4a e0       	ldi	r20, 0x0A	; 10
 2ce:	6e e0       	ldi	r22, 0x0E	; 14
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	08 2e       	mov	r0, r24
 2d4:	00 0c       	add	r0, r0
 2d6:	99 0b       	sbc	r25, r25
 2d8:	0e 94 2d 03 	call	0x65a	; 0x65a <__itoa_ncheck>
			itoa(vol, mixer_vol, 10);
			//itoa(ADC, mixer_vol, 10);
			//itoa(channel, currchannel, 10);
			//USART_TX(currchannel);
			USART_TXST(mixer_vol);
 2dc:	8e e0       	ldi	r24, 0x0E	; 14
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_TXST>
			USART_TX('|');
 2e4:	8c e7       	ldi	r24, 0x7C	; 124
 2e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_TX>
			
			//increment ADC channel/ go to next ADC pin
			channel++;
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		USART_TXST(mixer_vol);
		USART_TX('|');
		RotaryResetStatus();
		
		//Only go to channel A4
		while(channel <= 4)
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f8:	85 30       	cpi	r24, 0x05	; 5
 2fa:	10 f2       	brcs	.-124    	; 0x280 <main+0x78>
			//increment ADC channel/ go to next ADC pin
			channel++;
		}
		
		//transmit end-of-line character
		USART_TXST("\r");
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_TXST>
		//send newline character
		USART_TXST("\n");
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_TXST>
		
		//Start over from ADC2
		channel = 0x02;
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
    }
 312:	81 cf       	rjmp	.-254    	; 0x216 <main+0xe>

00000314 <__divsf3>:
 314:	0e 94 9e 01 	call	0x33c	; 0x33c <__divsf3x>
 318:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 31c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 320:	58 f0       	brcs	.+22     	; 0x338 <__divsf3+0x24>
 322:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 326:	40 f0       	brcs	.+16     	; 0x338 <__divsf3+0x24>
 328:	29 f4       	brne	.+10     	; 0x334 <__divsf3+0x20>
 32a:	5f 3f       	cpi	r21, 0xFF	; 255
 32c:	29 f0       	breq	.+10     	; 0x338 <__divsf3+0x24>
 32e:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 332:	51 11       	cpse	r21, r1
 334:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 338:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>

0000033c <__divsf3x>:
 33c:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 340:	68 f3       	brcs	.-38     	; 0x31c <__divsf3+0x8>

00000342 <__divsf3_pse>:
 342:	99 23       	and	r25, r25
 344:	b1 f3       	breq	.-20     	; 0x332 <__divsf3+0x1e>
 346:	55 23       	and	r21, r21
 348:	91 f3       	breq	.-28     	; 0x32e <__divsf3+0x1a>
 34a:	95 1b       	sub	r25, r21
 34c:	55 0b       	sbc	r21, r21
 34e:	bb 27       	eor	r27, r27
 350:	aa 27       	eor	r26, r26
 352:	62 17       	cp	r22, r18
 354:	73 07       	cpc	r23, r19
 356:	84 07       	cpc	r24, r20
 358:	38 f0       	brcs	.+14     	; 0x368 <__divsf3_pse+0x26>
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	aa 1f       	adc	r26, r26
 366:	a9 f3       	breq	.-22     	; 0x352 <__divsf3_pse+0x10>
 368:	35 d0       	rcall	.+106    	; 0x3d4 <__divsf3_pse+0x92>
 36a:	0e 2e       	mov	r0, r30
 36c:	3a f0       	brmi	.+14     	; 0x37c <__divsf3_pse+0x3a>
 36e:	e0 e8       	ldi	r30, 0x80	; 128
 370:	32 d0       	rcall	.+100    	; 0x3d6 <__divsf3_pse+0x94>
 372:	91 50       	subi	r25, 0x01	; 1
 374:	50 40       	sbci	r21, 0x00	; 0
 376:	e6 95       	lsr	r30
 378:	00 1c       	adc	r0, r0
 37a:	ca f7       	brpl	.-14     	; 0x36e <__divsf3_pse+0x2c>
 37c:	2b d0       	rcall	.+86     	; 0x3d4 <__divsf3_pse+0x92>
 37e:	fe 2f       	mov	r31, r30
 380:	29 d0       	rcall	.+82     	; 0x3d4 <__divsf3_pse+0x92>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	bb 1f       	adc	r27, r27
 38a:	26 17       	cp	r18, r22
 38c:	37 07       	cpc	r19, r23
 38e:	48 07       	cpc	r20, r24
 390:	ab 07       	cpc	r26, r27
 392:	b0 e8       	ldi	r27, 0x80	; 128
 394:	09 f0       	breq	.+2      	; 0x398 <__divsf3_pse+0x56>
 396:	bb 0b       	sbc	r27, r27
 398:	80 2d       	mov	r24, r0
 39a:	bf 01       	movw	r22, r30
 39c:	ff 27       	eor	r31, r31
 39e:	93 58       	subi	r25, 0x83	; 131
 3a0:	5f 4f       	sbci	r21, 0xFF	; 255
 3a2:	3a f0       	brmi	.+14     	; 0x3b2 <__divsf3_pse+0x70>
 3a4:	9e 3f       	cpi	r25, 0xFE	; 254
 3a6:	51 05       	cpc	r21, r1
 3a8:	78 f0       	brcs	.+30     	; 0x3c8 <__divsf3_pse+0x86>
 3aa:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 3ae:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 3b2:	5f 3f       	cpi	r21, 0xFF	; 255
 3b4:	e4 f3       	brlt	.-8      	; 0x3ae <__divsf3_pse+0x6c>
 3b6:	98 3e       	cpi	r25, 0xE8	; 232
 3b8:	d4 f3       	brlt	.-12     	; 0x3ae <__divsf3_pse+0x6c>
 3ba:	86 95       	lsr	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f7 95       	ror	r31
 3c4:	9f 5f       	subi	r25, 0xFF	; 255
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__divsf3_pse+0x78>
 3c8:	88 0f       	add	r24, r24
 3ca:	91 1d       	adc	r25, r1
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	97 f9       	bld	r25, 7
 3d2:	08 95       	ret
 3d4:	e1 e0       	ldi	r30, 0x01	; 1
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	bb 1f       	adc	r27, r27
 3de:	62 17       	cp	r22, r18
 3e0:	73 07       	cpc	r23, r19
 3e2:	84 07       	cpc	r24, r20
 3e4:	ba 07       	cpc	r27, r26
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <__divsf3_pse+0xae>
 3e8:	62 1b       	sub	r22, r18
 3ea:	73 0b       	sbc	r23, r19
 3ec:	84 0b       	sbc	r24, r20
 3ee:	ba 0b       	sbc	r27, r26
 3f0:	ee 1f       	adc	r30, r30
 3f2:	88 f7       	brcc	.-30     	; 0x3d6 <__divsf3_pse+0x94>
 3f4:	e0 95       	com	r30
 3f6:	08 95       	ret

000003f8 <__fixsfsi>:
 3f8:	0e 94 03 02 	call	0x406	; 0x406 <__fixunssfsi>
 3fc:	68 94       	set
 3fe:	b1 11       	cpse	r27, r1
 400:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 404:	08 95       	ret

00000406 <__fixunssfsi>:
 406:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_splitA>
 40a:	88 f0       	brcs	.+34     	; 0x42e <__fixunssfsi+0x28>
 40c:	9f 57       	subi	r25, 0x7F	; 127
 40e:	98 f0       	brcs	.+38     	; 0x436 <__fixunssfsi+0x30>
 410:	b9 2f       	mov	r27, r25
 412:	99 27       	eor	r25, r25
 414:	b7 51       	subi	r27, 0x17	; 23
 416:	b0 f0       	brcs	.+44     	; 0x444 <__fixunssfsi+0x3e>
 418:	e1 f0       	breq	.+56     	; 0x452 <__fixunssfsi+0x4c>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a f0       	brmi	.+6      	; 0x42a <__fixunssfsi+0x24>
 424:	ba 95       	dec	r27
 426:	c9 f7       	brne	.-14     	; 0x41a <__fixunssfsi+0x14>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__fixunssfsi+0x4c>
 42a:	b1 30       	cpi	r27, 0x01	; 1
 42c:	91 f0       	breq	.+36     	; 0x452 <__fixunssfsi+0x4c>
 42e:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_zero>
 432:	b1 e0       	ldi	r27, 0x01	; 1
 434:	08 95       	ret
 436:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_zero>
 43a:	67 2f       	mov	r22, r23
 43c:	78 2f       	mov	r23, r24
 43e:	88 27       	eor	r24, r24
 440:	b8 5f       	subi	r27, 0xF8	; 248
 442:	39 f0       	breq	.+14     	; 0x452 <__fixunssfsi+0x4c>
 444:	b9 3f       	cpi	r27, 0xF9	; 249
 446:	cc f3       	brlt	.-14     	; 0x43a <__fixunssfsi+0x34>
 448:	86 95       	lsr	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b3 95       	inc	r27
 450:	d9 f7       	brne	.-10     	; 0x448 <__fixunssfsi+0x42>
 452:	3e f4       	brtc	.+14     	; 0x462 <__fixunssfsi+0x5c>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__floatunsisf>:
 464:	e8 94       	clt
 466:	09 c0       	rjmp	.+18     	; 0x47a <__floatsisf+0x12>

00000468 <__floatsisf>:
 468:	97 fb       	bst	r25, 7
 46a:	3e f4       	brtc	.+14     	; 0x47a <__floatsisf+0x12>
 46c:	90 95       	com	r25
 46e:	80 95       	com	r24
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	99 23       	and	r25, r25
 47c:	a9 f0       	breq	.+42     	; 0x4a8 <__floatsisf+0x40>
 47e:	f9 2f       	mov	r31, r25
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	bb 27       	eor	r27, r27
 484:	93 95       	inc	r25
 486:	f6 95       	lsr	r31
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f1 11       	cpse	r31, r1
 492:	f8 cf       	rjmp	.-16     	; 0x484 <__floatsisf+0x1c>
 494:	fa f4       	brpl	.+62     	; 0x4d4 <__floatsisf+0x6c>
 496:	bb 0f       	add	r27, r27
 498:	11 f4       	brne	.+4      	; 0x49e <__floatsisf+0x36>
 49a:	60 ff       	sbrs	r22, 0
 49c:	1b c0       	rjmp	.+54     	; 0x4d4 <__floatsisf+0x6c>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <__floatsisf+0x6c>
 4a8:	88 23       	and	r24, r24
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__floatsisf+0x48>
 4ac:	96 e9       	ldi	r25, 0x96	; 150
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__floatsisf+0x6a>
 4b0:	77 23       	and	r23, r23
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__floatsisf+0x54>
 4b4:	9e e8       	ldi	r25, 0x8E	; 142
 4b6:	87 2f       	mov	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__floatsisf+0x5e>
 4bc:	66 23       	and	r22, r22
 4be:	71 f0       	breq	.+28     	; 0x4dc <__floatsisf+0x74>
 4c0:	96 e8       	ldi	r25, 0x86	; 134
 4c2:	86 2f       	mov	r24, r22
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	2a f0       	brmi	.+10     	; 0x4d4 <__floatsisf+0x6c>
 4ca:	9a 95       	dec	r25
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	da f7       	brpl	.-10     	; 0x4ca <__floatsisf+0x62>
 4d4:	88 0f       	add	r24, r24
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret

000004de <__fp_inf>:
 4de:	97 f9       	bld	r25, 7
 4e0:	9f 67       	ori	r25, 0x7F	; 127
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	08 95       	ret

000004ea <__fp_nan>:
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	08 95       	ret

000004f0 <__fp_pscA>:
 4f0:	00 24       	eor	r0, r0
 4f2:	0a 94       	dec	r0
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	09 06       	cpc	r0, r25
 4fc:	08 95       	ret

000004fe <__fp_pscB>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	12 16       	cp	r1, r18
 504:	13 06       	cpc	r1, r19
 506:	14 06       	cpc	r1, r20
 508:	05 06       	cpc	r0, r21
 50a:	08 95       	ret

0000050c <__fp_round>:
 50c:	09 2e       	mov	r0, r25
 50e:	03 94       	inc	r0
 510:	00 0c       	add	r0, r0
 512:	11 f4       	brne	.+4      	; 0x518 <__fp_round+0xc>
 514:	88 23       	and	r24, r24
 516:	52 f0       	brmi	.+20     	; 0x52c <__fp_round+0x20>
 518:	bb 0f       	add	r27, r27
 51a:	40 f4       	brcc	.+16     	; 0x52c <__fp_round+0x20>
 51c:	bf 2b       	or	r27, r31
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0x18>
 520:	60 ff       	sbrs	r22, 0
 522:	04 c0       	rjmp	.+8      	; 0x52c <__fp_round+0x20>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	08 95       	ret

0000052e <__fp_split3>:
 52e:	57 fd       	sbrc	r21, 7
 530:	90 58       	subi	r25, 0x80	; 128
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	59 f0       	breq	.+22     	; 0x54e <__fp_splitA+0x10>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	71 f0       	breq	.+28     	; 0x558 <__fp_splitA+0x1a>
 53c:	47 95       	ror	r20

0000053e <__fp_splitA>:
 53e:	88 0f       	add	r24, r24
 540:	97 fb       	bst	r25, 7
 542:	99 1f       	adc	r25, r25
 544:	61 f0       	breq	.+24     	; 0x55e <__fp_splitA+0x20>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	79 f0       	breq	.+30     	; 0x568 <__fp_splitA+0x2a>
 54a:	87 95       	ror	r24
 54c:	08 95       	ret
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	55 1f       	adc	r21, r21
 556:	f2 cf       	rjmp	.-28     	; 0x53c <__fp_split3+0xe>
 558:	46 95       	lsr	r20
 55a:	f1 df       	rcall	.-30     	; 0x53e <__fp_splitA>
 55c:	08 c0       	rjmp	.+16     	; 0x56e <__fp_splitA+0x30>
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	99 1f       	adc	r25, r25
 566:	f1 cf       	rjmp	.-30     	; 0x54a <__fp_splitA+0xc>
 568:	86 95       	lsr	r24
 56a:	71 05       	cpc	r23, r1
 56c:	61 05       	cpc	r22, r1
 56e:	08 94       	sec
 570:	08 95       	ret

00000572 <__fp_zero>:
 572:	e8 94       	clt

00000574 <__fp_szero>:
 574:	bb 27       	eor	r27, r27
 576:	66 27       	eor	r22, r22
 578:	77 27       	eor	r23, r23
 57a:	cb 01       	movw	r24, r22
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__mulsf3x>
 584:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 588:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 58c:	38 f0       	brcs	.+14     	; 0x59c <__mulsf3+0x1c>
 58e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 592:	20 f0       	brcs	.+8      	; 0x59c <__mulsf3+0x1c>
 594:	95 23       	and	r25, r21
 596:	11 f0       	breq	.+4      	; 0x59c <__mulsf3+0x1c>
 598:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 59c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>
 5a0:	11 24       	eor	r1, r1
 5a2:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>

000005a6 <__mulsf3x>:
 5a6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 5aa:	70 f3       	brcs	.-36     	; 0x588 <__mulsf3+0x8>

000005ac <__mulsf3_pse>:
 5ac:	95 9f       	mul	r25, r21
 5ae:	c1 f3       	breq	.-16     	; 0x5a0 <__mulsf3+0x20>
 5b0:	95 0f       	add	r25, r21
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	55 1f       	adc	r21, r21
 5b6:	62 9f       	mul	r22, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	72 9f       	mul	r23, r18
 5bc:	bb 27       	eor	r27, r27
 5be:	f0 0d       	add	r31, r0
 5c0:	b1 1d       	adc	r27, r1
 5c2:	63 9f       	mul	r22, r19
 5c4:	aa 27       	eor	r26, r26
 5c6:	f0 0d       	add	r31, r0
 5c8:	b1 1d       	adc	r27, r1
 5ca:	aa 1f       	adc	r26, r26
 5cc:	64 9f       	mul	r22, r20
 5ce:	66 27       	eor	r22, r22
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	66 1f       	adc	r22, r22
 5d6:	82 9f       	mul	r24, r18
 5d8:	22 27       	eor	r18, r18
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	62 1f       	adc	r22, r18
 5e0:	73 9f       	mul	r23, r19
 5e2:	b0 0d       	add	r27, r0
 5e4:	a1 1d       	adc	r26, r1
 5e6:	62 1f       	adc	r22, r18
 5e8:	83 9f       	mul	r24, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	22 1f       	adc	r18, r18
 5f0:	74 9f       	mul	r23, r20
 5f2:	33 27       	eor	r19, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	23 1f       	adc	r18, r19
 5fa:	84 9f       	mul	r24, r20
 5fc:	60 0d       	add	r22, r0
 5fe:	21 1d       	adc	r18, r1
 600:	82 2f       	mov	r24, r18
 602:	76 2f       	mov	r23, r22
 604:	6a 2f       	mov	r22, r26
 606:	11 24       	eor	r1, r1
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	9a f0       	brmi	.+38     	; 0x634 <__mulsf3_pse+0x88>
 60e:	f1 f0       	breq	.+60     	; 0x64c <__mulsf3_pse+0xa0>
 610:	88 23       	and	r24, r24
 612:	4a f0       	brmi	.+18     	; 0x626 <__mulsf3_pse+0x7a>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	a9 f7       	brne	.-22     	; 0x610 <__mulsf3_pse+0x64>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	80 f0       	brcs	.+32     	; 0x64c <__mulsf3_pse+0xa0>
 62c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 630:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	e4 f3       	brlt	.-8      	; 0x630 <__mulsf3_pse+0x84>
 638:	98 3e       	cpi	r25, 0xE8	; 232
 63a:	d4 f3       	brlt	.-12     	; 0x630 <__mulsf3_pse+0x84>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	e7 95       	ror	r30
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	c1 f7       	brne	.-16     	; 0x63c <__mulsf3_pse+0x90>
 64c:	fe 2b       	or	r31, r30
 64e:	88 0f       	add	r24, r24
 650:	91 1d       	adc	r25, r1
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__itoa_ncheck>:
 65a:	bb 27       	eor	r27, r27
 65c:	4a 30       	cpi	r20, 0x0A	; 10
 65e:	31 f4       	brne	.+12     	; 0x66c <__itoa_ncheck+0x12>
 660:	99 23       	and	r25, r25
 662:	22 f4       	brpl	.+8      	; 0x66c <__itoa_ncheck+0x12>
 664:	bd e2       	ldi	r27, 0x2D	; 45
 666:	90 95       	com	r25
 668:	81 95       	neg	r24
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	0c 94 39 03 	jmp	0x672	; 0x672 <__utoa_common>

00000670 <__utoa_ncheck>:
 670:	bb 27       	eor	r27, r27

00000672 <__utoa_common>:
 672:	fb 01       	movw	r30, r22
 674:	55 27       	eor	r21, r21
 676:	aa 27       	eor	r26, r26
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	aa 1f       	adc	r26, r26
 67e:	a4 17       	cp	r26, r20
 680:	10 f0       	brcs	.+4      	; 0x686 <__utoa_common+0x14>
 682:	a4 1b       	sub	r26, r20
 684:	83 95       	inc	r24
 686:	50 51       	subi	r21, 0x10	; 16
 688:	b9 f7       	brne	.-18     	; 0x678 <__utoa_common+0x6>
 68a:	a0 5d       	subi	r26, 0xD0	; 208
 68c:	aa 33       	cpi	r26, 0x3A	; 58
 68e:	08 f0       	brcs	.+2      	; 0x692 <__utoa_common+0x20>
 690:	a9 5d       	subi	r26, 0xD9	; 217
 692:	a1 93       	st	Z+, r26
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	79 f7       	brne	.-34     	; 0x676 <__utoa_common+0x4>
 698:	b1 11       	cpse	r27, r1
 69a:	b1 93       	st	Z+, r27
 69c:	11 92       	st	Z+, r1
 69e:	cb 01       	movw	r24, r22
 6a0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <strrev>

000006a4 <strrev>:
 6a4:	dc 01       	movw	r26, r24
 6a6:	fc 01       	movw	r30, r24
 6a8:	67 2f       	mov	r22, r23
 6aa:	71 91       	ld	r23, Z+
 6ac:	77 23       	and	r23, r23
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <strrev+0x4>
 6b0:	32 97       	sbiw	r30, 0x02	; 2
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <strrev+0x18>
 6b4:	7c 91       	ld	r23, X
 6b6:	6d 93       	st	X+, r22
 6b8:	70 83       	st	Z, r23
 6ba:	62 91       	ld	r22, -Z
 6bc:	ae 17       	cp	r26, r30
 6be:	bf 07       	cpc	r27, r31
 6c0:	c8 f3       	brcs	.-14     	; 0x6b4 <strrev+0x10>
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
