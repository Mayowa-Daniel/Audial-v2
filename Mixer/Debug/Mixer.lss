
Mixer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  00000788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be5  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056d  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000029a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 12 01 	call	0x224	; 0x224 <main>
  9e:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <RotaryInit>:
uint8_t rotarycount = 0;

void RotaryInit(void)
{
	//set pins as input
	ROTDDR &= ~((1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 7e       	andi	r24, 0xE3	; 227
  aa:	8a b9       	out	0x0a, r24	; 10
	//enable internal pull-ups for rotary and pots
	ROTPORT |= (1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON)|(1<<PORTC2)|(1<<PORTC3);;
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8c 61       	ori	r24, 0x1C	; 28
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <RotaryCheckStatus>:
}

void RotaryCheckStatus(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <RotaryCheckStatus+0x6>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	//reading rotary and button
	//check if rotation is left
	if(ROTA & (!wait))
  be:	89 b1       	in	r24, 0x09	; 9
  c0:	86 95       	lsr	r24
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	89 27       	eor	r24, r25
  ca:	81 70       	andi	r24, 0x01	; 1
  cc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
  d0:	21 11       	cpse	r18, r1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	89 23       	and	r24, r25
  d6:	19 f0       	breq	.+6      	; 0xde <RotaryCheckStatus+0x2a>
	wait=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if (ROTB & ROTA & (wait))
  de:	89 b1       	in	r24, 0x09	; 9
  e0:	29 b1       	in	r18, 0x09	; 9
  e2:	86 95       	lsr	r24
  e4:	86 95       	lsr	r24
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	89 27       	eor	r24, r25
  ea:	26 95       	lsr	r18
  ec:	26 95       	lsr	r18
  ee:	26 95       	lsr	r18
  f0:	92 27       	eor	r25, r18
  f2:	91 70       	andi	r25, 0x01	; 1
  f4:	89 23       	and	r24, r25
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end>
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	84 23       	and	r24, r20
 100:	95 23       	and	r25, r21
 102:	89 2b       	or	r24, r25
 104:	31 f0       	breq	.+12     	; 0x112 <RotaryCheckStatus+0x5e>
	{
		rotarystatus=2;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		wait=2;
 10c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 110:	18 c0       	rjmp	.+48     	; 0x142 <RotaryCheckStatus+0x8e>
	}
	else if(ROTA & (!ROTB) & wait)
 112:	89 b1       	in	r24, 0x09	; 9
 114:	29 b1       	in	r18, 0x09	; 9
 116:	86 95       	lsr	r24
 118:	86 95       	lsr	r24
 11a:	86 95       	lsr	r24
 11c:	31 e0       	ldi	r19, 0x01	; 1
 11e:	83 27       	eor	r24, r19
 120:	22 fb       	bst	r18, 2
 122:	22 27       	eor	r18, r18
 124:	20 f9       	bld	r18, 0
 126:	98 2f       	mov	r25, r24
 128:	92 23       	and	r25, r18
 12a:	89 2f       	mov	r24, r25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	84 23       	and	r24, r20
 130:	95 23       	and	r25, r21
 132:	89 2b       	or	r24, r25
 134:	31 f0       	breq	.+12     	; 0x142 <RotaryCheckStatus+0x8e>
	{
		rotarystatus=1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		wait=2;		
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
	if ((!ROTA)&!(ROTB)&(wait==2))
 142:	89 b1       	in	r24, 0x09	; 9
 144:	99 b1       	in	r25, 0x09	; 9
 146:	83 fb       	bst	r24, 3
 148:	22 27       	eor	r18, r18
 14a:	20 f9       	bld	r18, 0
 14c:	92 fb       	bst	r25, 2
 14e:	88 27       	eor	r24, r24
 150:	80 f9       	bld	r24, 0
 152:	82 23       	and	r24, r18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	09 f0       	breq	.+2      	; 0x160 <RotaryCheckStatus+0xac>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	88 23       	and	r24, r24
 162:	19 f0       	breq	.+6      	; 0x16a <RotaryCheckStatus+0xb6>
 164:	91 11       	cpse	r25, r1
	wait=0;
 166:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	//check button status
	if (ROTCLICK)
 16a:	4c 99       	sbic	0x09, 4	; 9
 16c:	12 c0       	rjmp	.+36     	; 0x192 <RotaryCheckStatus+0xde>
	{
		for(volatile uint16_t x=0;x<0x0FFF;x++);
 16e:	1a 82       	std	Y+2, r1	; 0x02
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	05 c0       	rjmp	.+10     	; 0x17e <RotaryCheckStatus+0xca>
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	9f 40       	sbci	r25, 0x0F	; 15
 186:	b0 f3       	brcs	.-20     	; 0x174 <RotaryCheckStatus+0xc0>
		if (ROTCLICK)
 188:	4c 99       	sbic	0x09, 4	; 9
 18a:	03 c0       	rjmp	.+6      	; 0x192 <RotaryCheckStatus+0xde>
		rotarystatus=3;
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
		
	}
}
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <RotaryGetStatus>:

//return button status
uint8_t RotaryGetStatus(void)
{
	return rotarystatus;
}
 19c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rotarystatus>
 1a0:	08 95       	ret

000001a2 <RotaryResetStatus>:
//reset status
void RotaryResetStatus(void)
{
	rotarystatus=0;
 1a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rotarystatus>
 1a6:	08 95       	ret

000001a8 <USART_init>:
void USART_init()
{
	unsigned int UBRR_val = (((F_CPU/(16*BAUD)))-1);
	
	//Configure baud rate
	UBRR0L = UBRR_val;
 1a8:	87 e6       	ldi	r24, 0x67	; 103
 1aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = UBRR_val >> 8;
 1ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	//Set transmit bit
	UCSR0B |= (1 << TXEN0);
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <USART_TX>:
	}	
}

void USART_TX(char single)
{
	while((UCSR0A & (1<<UDRE0))==0);
 1c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c8:	95 ff       	sbrs	r25, 5
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <USART_TX>
	UDR0 = single;
 1cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d0:	08 95       	ret

000001d2 <USART_TXST>:
	
}


void USART_TXST(char * volumo)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 1da:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(volumo[i] != '\0')
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <USART_TXST+0x12>
	{
		USART_TX(volumo[i]);
 1de:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_TX>
		
		i++;
 1e2:	cf 5f       	subi	r28, 0xFF	; 255

void USART_TXST(char * volumo)
{
	unsigned char i = 0;
	
	while(volumo[i] != '\0')
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 81       	ld	r24, Z
 1ec:	81 11       	cpse	r24, r1
 1ee:	f7 cf       	rjmp	.-18     	; 0x1de <USART_TXST+0xc>
	{
		USART_TX(volumo[i]);
		
		i++;
	}	
}
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <converto>:
}


int converto(int val)
{
	return ((val*100.0)/1023);
 1f8:	bc 01       	movw	r22, r24
 1fa:	99 0f       	add	r25, r25
 1fc:	88 0b       	sbc	r24, r24
 1fe:	99 0b       	sbc	r25, r25
 200:	0e 94 47 02 	call	0x48e	; 0x48e <__floatsisf>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	48 ec       	ldi	r20, 0xC8	; 200
 20a:	52 e4       	ldi	r21, 0x42	; 66
 20c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__mulsf3>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 ec       	ldi	r19, 0xC0	; 192
 214:	4f e7       	ldi	r20, 0x7F	; 127
 216:	54 e4       	ldi	r21, 0x44	; 68
 218:	0e 94 9d 01 	call	0x33a	; 0x33a <__divsf3>
 21c:	0e 94 0f 02 	call	0x41e	; 0x41e <__fixsfsi>
}
 220:	cb 01       	movw	r24, r22
 222:	08 95       	ret

00000224 <main>:


int main(void)
{	
	//Initialize the input pins for the rotary encoder
    RotaryInit();
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <RotaryInit>
	//Initialize USART  
    USART_init();
 228:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_init>
	//Enable ADC pin
    ADCSRA = (1 << ADEN);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//DDRC |= (0<<PORTC2) | (0<<PORTC3);
	
    while(1)
    {
		
		RotaryCheckStatus();
 232:	0e 94 5a 00 	call	0xb4	; 0xb4 <RotaryCheckStatus>
		if(RotaryGetStatus() == 2)
 236:	0e 94 ce 00 	call	0x19c	; 0x19c <RotaryGetStatus>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	31 f4       	brne	.+12     	; 0x24a <main+0x26>
		{
			rotaryval--;
 23e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 242:	81 50       	subi	r24, 0x01	; 1
 244:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
 248:	09 c0       	rjmp	.+18     	; 0x25c <main+0x38>
		}
		else if(RotaryGetStatus() == 1)
 24a:	0e 94 ce 00 	call	0x19c	; 0x19c <RotaryGetStatus>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	29 f4       	brne	.+10     	; 0x25c <main+0x38>
		{
			rotaryval++;
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
		}
		
			
		if(rotaryval < 0)
 25c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
 260:	88 23       	and	r24, r24
 262:	1c f4       	brge	.+6      	; 0x26a <main+0x46>
		{
			rotaryval = 0;
 264:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rotaryval>
 268:	05 c0       	rjmp	.+10     	; 0x274 <main+0x50>
		}
		else if(rotaryval > 100)
 26a:	85 36       	cpi	r24, 0x65	; 101
 26c:	1c f0       	brlt	.+6      	; 0x274 <main+0x50>
		{
			rotaryval = 100;
 26e:	84 e6       	ldi	r24, 0x64	; 100
 270:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rotaryval>
		}
		
		//Convert rotaryval to a USART transmittable string	
		itoa(rotaryval, mixer_vol, 10);
 274:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rotaryval>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 278:	4a e0       	ldi	r20, 0x0A	; 10
 27a:	6e e0       	ldi	r22, 0x0E	; 14
 27c:	71 e0       	ldi	r23, 0x01	; 1
 27e:	08 2e       	mov	r0, r24
 280:	00 0c       	add	r0, r0
 282:	99 0b       	sbc	r25, r25
 284:	0e 94 40 03 	call	0x680	; 0x680 <__itoa_ncheck>
		USART_TXST(mixer_vol);
 288:	8e e0       	ldi	r24, 0x0E	; 14
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_TXST>
		USART_TX('|');
 290:	8c e7       	ldi	r24, 0x7C	; 124
 292:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_TX>
		RotaryResetStatus();
 296:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <RotaryResetStatus>
		
		//Only go to channel A4
		while(channel <= 4)
 29a:	3e c0       	rjmp	.+124    	; 0x318 <main+0xf4>
		{
			ADCSRA = (1 << ADEN);
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
			ADMUX = (1 << REFS0) | (0 << REFS1) | channel;
 2a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			
			//noisy ADC pins lead to stupid ADC values
			//for some fucking reason you need to dump the ADC value TWICE
			for (int i=0; i < 2; i++)
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <main+0xae>
			{
				//Start ADC Conversion
				ADCSRA |= (1 << ADSC);
 2b2:	ea e7       	ldi	r30, 0x7A	; 122
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	80 83       	st	Z, r24
				//ADMUX |= (channel << 1);
				//while(ADCSRA & (1<<ADSC));
				//Wait till conversion is complete
				while((ADCSRA & 1 << ADIF) == 0);
 2bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2c0:	84 ff       	sbrs	r24, 4
 2c2:	fc cf       	rjmp	.-8      	; 0x2bc <main+0x98>
				ADCSRA |= (1<<ADIF);
 2c4:	ea e7       	ldi	r30, 0x7A	; 122
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 61       	ori	r24, 0x10	; 16
 2cc:	80 83       	st	Z, r24
			ADCSRA = (1 << ADEN);
			ADMUX = (1 << REFS0) | (0 << REFS1) | channel;
			
			//noisy ADC pins lead to stupid ADC values
			//for some fucking reason you need to dump the ADC value TWICE
			for (int i=0; i < 2; i++)
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	6c f3       	brlt	.-38     	; 0x2b2 <main+0x8e>
				while((ADCSRA & 1 << ADIF) == 0);
				ADCSRA |= (1<<ADIF);
			}
						
			
			vol = converto(ADC);
 2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2e0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <converto>
 2e4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <vol>
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	6e e0       	ldi	r22, 0x0E	; 14
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	08 2e       	mov	r0, r24
 2f0:	00 0c       	add	r0, r0
 2f2:	99 0b       	sbc	r25, r25
 2f4:	0e 94 40 03 	call	0x680	; 0x680 <__itoa_ncheck>
			itoa(vol, mixer_vol, 10);
			//itoa(ADC, mixer_vol, 10);
			//itoa(channel, currchannel, 10);
			//USART_TX(currchannel);
			USART_TXST(mixer_vol);
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_TXST>
			if (channel != 4)
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 304:	84 30       	cpi	r24, 0x04	; 4
 306:	19 f0       	breq	.+6      	; 0x30e <main+0xea>
			{
				USART_TX('|');
 308:	8c e7       	ldi	r24, 0x7C	; 124
 30a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_TX>
			}
			
			
			//increment ADC channel/ go to next ADC pin
			channel++;
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		USART_TXST(mixer_vol);
		USART_TX('|');
		RotaryResetStatus();
		
		//Only go to channel A4
		while(channel <= 4)
 318:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31c:	85 30       	cpi	r24, 0x05	; 5
 31e:	08 f4       	brcc	.+2      	; 0x322 <main+0xfe>
 320:	bd cf       	rjmp	.-134    	; 0x29c <main+0x78>
			//increment ADC channel/ go to next ADC pin
			channel++;
		}
		
		//transmit end-of-line character
		USART_TXST("\r");
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_TXST>
		//send newline character
		USART_TXST("\n");
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_TXST>
		
		//Start over from ADC2
		channel = 0x02;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
    }
 338:	7c cf       	rjmp	.-264    	; 0x232 <main+0xe>

0000033a <__divsf3>:
 33a:	0e 94 b1 01 	call	0x362	; 0x362 <__divsf3x>
 33e:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_round>
 342:	0e 94 92 02 	call	0x524	; 0x524 <__fp_pscB>
 346:	58 f0       	brcs	.+22     	; 0x35e <__divsf3+0x24>
 348:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_pscA>
 34c:	40 f0       	brcs	.+16     	; 0x35e <__divsf3+0x24>
 34e:	29 f4       	brne	.+10     	; 0x35a <__divsf3+0x20>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	29 f0       	breq	.+10     	; 0x35e <__divsf3+0x24>
 354:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_inf>
 358:	51 11       	cpse	r21, r1
 35a:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_szero>
 35e:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_nan>

00000362 <__divsf3x>:
 362:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_split3>
 366:	68 f3       	brcs	.-38     	; 0x342 <__divsf3+0x8>

00000368 <__divsf3_pse>:
 368:	99 23       	and	r25, r25
 36a:	b1 f3       	breq	.-20     	; 0x358 <__divsf3+0x1e>
 36c:	55 23       	and	r21, r21
 36e:	91 f3       	breq	.-28     	; 0x354 <__divsf3+0x1a>
 370:	95 1b       	sub	r25, r21
 372:	55 0b       	sbc	r21, r21
 374:	bb 27       	eor	r27, r27
 376:	aa 27       	eor	r26, r26
 378:	62 17       	cp	r22, r18
 37a:	73 07       	cpc	r23, r19
 37c:	84 07       	cpc	r24, r20
 37e:	38 f0       	brcs	.+14     	; 0x38e <__divsf3_pse+0x26>
 380:	9f 5f       	subi	r25, 0xFF	; 255
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	44 1f       	adc	r20, r20
 38a:	aa 1f       	adc	r26, r26
 38c:	a9 f3       	breq	.-22     	; 0x378 <__divsf3_pse+0x10>
 38e:	35 d0       	rcall	.+106    	; 0x3fa <__divsf3_pse+0x92>
 390:	0e 2e       	mov	r0, r30
 392:	3a f0       	brmi	.+14     	; 0x3a2 <__divsf3_pse+0x3a>
 394:	e0 e8       	ldi	r30, 0x80	; 128
 396:	32 d0       	rcall	.+100    	; 0x3fc <__divsf3_pse+0x94>
 398:	91 50       	subi	r25, 0x01	; 1
 39a:	50 40       	sbci	r21, 0x00	; 0
 39c:	e6 95       	lsr	r30
 39e:	00 1c       	adc	r0, r0
 3a0:	ca f7       	brpl	.-14     	; 0x394 <__divsf3_pse+0x2c>
 3a2:	2b d0       	rcall	.+86     	; 0x3fa <__divsf3_pse+0x92>
 3a4:	fe 2f       	mov	r31, r30
 3a6:	29 d0       	rcall	.+82     	; 0x3fa <__divsf3_pse+0x92>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	bb 1f       	adc	r27, r27
 3b0:	26 17       	cp	r18, r22
 3b2:	37 07       	cpc	r19, r23
 3b4:	48 07       	cpc	r20, r24
 3b6:	ab 07       	cpc	r26, r27
 3b8:	b0 e8       	ldi	r27, 0x80	; 128
 3ba:	09 f0       	breq	.+2      	; 0x3be <__divsf3_pse+0x56>
 3bc:	bb 0b       	sbc	r27, r27
 3be:	80 2d       	mov	r24, r0
 3c0:	bf 01       	movw	r22, r30
 3c2:	ff 27       	eor	r31, r31
 3c4:	93 58       	subi	r25, 0x83	; 131
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	3a f0       	brmi	.+14     	; 0x3d8 <__divsf3_pse+0x70>
 3ca:	9e 3f       	cpi	r25, 0xFE	; 254
 3cc:	51 05       	cpc	r21, r1
 3ce:	78 f0       	brcs	.+30     	; 0x3ee <__divsf3_pse+0x86>
 3d0:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_inf>
 3d4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_szero>
 3d8:	5f 3f       	cpi	r21, 0xFF	; 255
 3da:	e4 f3       	brlt	.-8      	; 0x3d4 <__divsf3_pse+0x6c>
 3dc:	98 3e       	cpi	r25, 0xE8	; 232
 3de:	d4 f3       	brlt	.-12     	; 0x3d4 <__divsf3_pse+0x6c>
 3e0:	86 95       	lsr	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f7 95       	ror	r31
 3ea:	9f 5f       	subi	r25, 0xFF	; 255
 3ec:	c9 f7       	brne	.-14     	; 0x3e0 <__divsf3_pse+0x78>
 3ee:	88 0f       	add	r24, r24
 3f0:	91 1d       	adc	r25, r1
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	97 f9       	bld	r25, 7
 3f8:	08 95       	ret
 3fa:	e1 e0       	ldi	r30, 0x01	; 1
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	bb 1f       	adc	r27, r27
 404:	62 17       	cp	r22, r18
 406:	73 07       	cpc	r23, r19
 408:	84 07       	cpc	r24, r20
 40a:	ba 07       	cpc	r27, r26
 40c:	20 f0       	brcs	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40e:	62 1b       	sub	r22, r18
 410:	73 0b       	sbc	r23, r19
 412:	84 0b       	sbc	r24, r20
 414:	ba 0b       	sbc	r27, r26
 416:	ee 1f       	adc	r30, r30
 418:	88 f7       	brcc	.-30     	; 0x3fc <__divsf3_pse+0x94>
 41a:	e0 95       	com	r30
 41c:	08 95       	ret

0000041e <__fixsfsi>:
 41e:	0e 94 16 02 	call	0x42c	; 0x42c <__fixunssfsi>
 422:	68 94       	set
 424:	b1 11       	cpse	r27, r1
 426:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_szero>
 42a:	08 95       	ret

0000042c <__fixunssfsi>:
 42c:	0e 94 b2 02 	call	0x564	; 0x564 <__fp_splitA>
 430:	88 f0       	brcs	.+34     	; 0x454 <__fixunssfsi+0x28>
 432:	9f 57       	subi	r25, 0x7F	; 127
 434:	98 f0       	brcs	.+38     	; 0x45c <__fixunssfsi+0x30>
 436:	b9 2f       	mov	r27, r25
 438:	99 27       	eor	r25, r25
 43a:	b7 51       	subi	r27, 0x17	; 23
 43c:	b0 f0       	brcs	.+44     	; 0x46a <__fixunssfsi+0x3e>
 43e:	e1 f0       	breq	.+56     	; 0x478 <__fixunssfsi+0x4c>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	1a f0       	brmi	.+6      	; 0x450 <__fixunssfsi+0x24>
 44a:	ba 95       	dec	r27
 44c:	c9 f7       	brne	.-14     	; 0x440 <__fixunssfsi+0x14>
 44e:	14 c0       	rjmp	.+40     	; 0x478 <__fixunssfsi+0x4c>
 450:	b1 30       	cpi	r27, 0x01	; 1
 452:	91 f0       	breq	.+36     	; 0x478 <__fixunssfsi+0x4c>
 454:	0e 94 cc 02 	call	0x598	; 0x598 <__fp_zero>
 458:	b1 e0       	ldi	r27, 0x01	; 1
 45a:	08 95       	ret
 45c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_zero>
 460:	67 2f       	mov	r22, r23
 462:	78 2f       	mov	r23, r24
 464:	88 27       	eor	r24, r24
 466:	b8 5f       	subi	r27, 0xF8	; 248
 468:	39 f0       	breq	.+14     	; 0x478 <__fixunssfsi+0x4c>
 46a:	b9 3f       	cpi	r27, 0xF9	; 249
 46c:	cc f3       	brlt	.-14     	; 0x460 <__fixunssfsi+0x34>
 46e:	86 95       	lsr	r24
 470:	77 95       	ror	r23
 472:	67 95       	ror	r22
 474:	b3 95       	inc	r27
 476:	d9 f7       	brne	.-10     	; 0x46e <__fixunssfsi+0x42>
 478:	3e f4       	brtc	.+14     	; 0x488 <__fixunssfsi+0x5c>
 47a:	90 95       	com	r25
 47c:	80 95       	com	r24
 47e:	70 95       	com	r23
 480:	61 95       	neg	r22
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8f 4f       	sbci	r24, 0xFF	; 255
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	08 95       	ret

0000048a <__floatunsisf>:
 48a:	e8 94       	clt
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <__floatsisf+0x12>

0000048e <__floatsisf>:
 48e:	97 fb       	bst	r25, 7
 490:	3e f4       	brtc	.+14     	; 0x4a0 <__floatsisf+0x12>
 492:	90 95       	com	r25
 494:	80 95       	com	r24
 496:	70 95       	com	r23
 498:	61 95       	neg	r22
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	99 23       	and	r25, r25
 4a2:	a9 f0       	breq	.+42     	; 0x4ce <__floatsisf+0x40>
 4a4:	f9 2f       	mov	r31, r25
 4a6:	96 e9       	ldi	r25, 0x96	; 150
 4a8:	bb 27       	eor	r27, r27
 4aa:	93 95       	inc	r25
 4ac:	f6 95       	lsr	r31
 4ae:	87 95       	ror	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b7 95       	ror	r27
 4b6:	f1 11       	cpse	r31, r1
 4b8:	f8 cf       	rjmp	.-16     	; 0x4aa <__floatsisf+0x1c>
 4ba:	fa f4       	brpl	.+62     	; 0x4fa <__floatsisf+0x6c>
 4bc:	bb 0f       	add	r27, r27
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__floatsisf+0x36>
 4c0:	60 ff       	sbrs	r22, 0
 4c2:	1b c0       	rjmp	.+54     	; 0x4fa <__floatsisf+0x6c>
 4c4:	6f 5f       	subi	r22, 0xFF	; 255
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	16 c0       	rjmp	.+44     	; 0x4fa <__floatsisf+0x6c>
 4ce:	88 23       	and	r24, r24
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <__floatsisf+0x48>
 4d2:	96 e9       	ldi	r25, 0x96	; 150
 4d4:	11 c0       	rjmp	.+34     	; 0x4f8 <__floatsisf+0x6a>
 4d6:	77 23       	and	r23, r23
 4d8:	21 f0       	breq	.+8      	; 0x4e2 <__floatsisf+0x54>
 4da:	9e e8       	ldi	r25, 0x8E	; 142
 4dc:	87 2f       	mov	r24, r23
 4de:	76 2f       	mov	r23, r22
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <__floatsisf+0x5e>
 4e2:	66 23       	and	r22, r22
 4e4:	71 f0       	breq	.+28     	; 0x502 <__floatsisf+0x74>
 4e6:	96 e8       	ldi	r25, 0x86	; 134
 4e8:	86 2f       	mov	r24, r22
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	2a f0       	brmi	.+10     	; 0x4fa <__floatsisf+0x6c>
 4f0:	9a 95       	dec	r25
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	da f7       	brpl	.-10     	; 0x4f0 <__floatsisf+0x62>
 4fa:	88 0f       	add	r24, r24
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	97 f9       	bld	r25, 7
 502:	08 95       	ret

00000504 <__fp_inf>:
 504:	97 f9       	bld	r25, 7
 506:	9f 67       	ori	r25, 0x7F	; 127
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	08 95       	ret

00000510 <__fp_nan>:
 510:	9f ef       	ldi	r25, 0xFF	; 255
 512:	80 ec       	ldi	r24, 0xC0	; 192
 514:	08 95       	ret

00000516 <__fp_pscA>:
 516:	00 24       	eor	r0, r0
 518:	0a 94       	dec	r0
 51a:	16 16       	cp	r1, r22
 51c:	17 06       	cpc	r1, r23
 51e:	18 06       	cpc	r1, r24
 520:	09 06       	cpc	r0, r25
 522:	08 95       	ret

00000524 <__fp_pscB>:
 524:	00 24       	eor	r0, r0
 526:	0a 94       	dec	r0
 528:	12 16       	cp	r1, r18
 52a:	13 06       	cpc	r1, r19
 52c:	14 06       	cpc	r1, r20
 52e:	05 06       	cpc	r0, r21
 530:	08 95       	ret

00000532 <__fp_round>:
 532:	09 2e       	mov	r0, r25
 534:	03 94       	inc	r0
 536:	00 0c       	add	r0, r0
 538:	11 f4       	brne	.+4      	; 0x53e <__fp_round+0xc>
 53a:	88 23       	and	r24, r24
 53c:	52 f0       	brmi	.+20     	; 0x552 <__fp_round+0x20>
 53e:	bb 0f       	add	r27, r27
 540:	40 f4       	brcc	.+16     	; 0x552 <__fp_round+0x20>
 542:	bf 2b       	or	r27, r31
 544:	11 f4       	brne	.+4      	; 0x54a <__fp_round+0x18>
 546:	60 ff       	sbrs	r22, 0
 548:	04 c0       	rjmp	.+8      	; 0x552 <__fp_round+0x20>
 54a:	6f 5f       	subi	r22, 0xFF	; 255
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	8f 4f       	sbci	r24, 0xFF	; 255
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__fp_split3>:
 554:	57 fd       	sbrc	r21, 7
 556:	90 58       	subi	r25, 0x80	; 128
 558:	44 0f       	add	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	59 f0       	breq	.+22     	; 0x574 <__fp_splitA+0x10>
 55e:	5f 3f       	cpi	r21, 0xFF	; 255
 560:	71 f0       	breq	.+28     	; 0x57e <__fp_splitA+0x1a>
 562:	47 95       	ror	r20

00000564 <__fp_splitA>:
 564:	88 0f       	add	r24, r24
 566:	97 fb       	bst	r25, 7
 568:	99 1f       	adc	r25, r25
 56a:	61 f0       	breq	.+24     	; 0x584 <__fp_splitA+0x20>
 56c:	9f 3f       	cpi	r25, 0xFF	; 255
 56e:	79 f0       	breq	.+30     	; 0x58e <__fp_splitA+0x2a>
 570:	87 95       	ror	r24
 572:	08 95       	ret
 574:	12 16       	cp	r1, r18
 576:	13 06       	cpc	r1, r19
 578:	14 06       	cpc	r1, r20
 57a:	55 1f       	adc	r21, r21
 57c:	f2 cf       	rjmp	.-28     	; 0x562 <__fp_split3+0xe>
 57e:	46 95       	lsr	r20
 580:	f1 df       	rcall	.-30     	; 0x564 <__fp_splitA>
 582:	08 c0       	rjmp	.+16     	; 0x594 <__fp_splitA+0x30>
 584:	16 16       	cp	r1, r22
 586:	17 06       	cpc	r1, r23
 588:	18 06       	cpc	r1, r24
 58a:	99 1f       	adc	r25, r25
 58c:	f1 cf       	rjmp	.-30     	; 0x570 <__fp_splitA+0xc>
 58e:	86 95       	lsr	r24
 590:	71 05       	cpc	r23, r1
 592:	61 05       	cpc	r22, r1
 594:	08 94       	sec
 596:	08 95       	ret

00000598 <__fp_zero>:
 598:	e8 94       	clt

0000059a <__fp_szero>:
 59a:	bb 27       	eor	r27, r27
 59c:	66 27       	eor	r22, r22
 59e:	77 27       	eor	r23, r23
 5a0:	cb 01       	movw	r24, r22
 5a2:	97 f9       	bld	r25, 7
 5a4:	08 95       	ret

000005a6 <__mulsf3>:
 5a6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__mulsf3x>
 5aa:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_round>
 5ae:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_pscA>
 5b2:	38 f0       	brcs	.+14     	; 0x5c2 <__mulsf3+0x1c>
 5b4:	0e 94 92 02 	call	0x524	; 0x524 <__fp_pscB>
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__mulsf3+0x1c>
 5ba:	95 23       	and	r25, r21
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <__mulsf3+0x1c>
 5be:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_inf>
 5c2:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_nan>
 5c6:	11 24       	eor	r1, r1
 5c8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_szero>

000005cc <__mulsf3x>:
 5cc:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_split3>
 5d0:	70 f3       	brcs	.-36     	; 0x5ae <__mulsf3+0x8>

000005d2 <__mulsf3_pse>:
 5d2:	95 9f       	mul	r25, r21
 5d4:	c1 f3       	breq	.-16     	; 0x5c6 <__mulsf3+0x20>
 5d6:	95 0f       	add	r25, r21
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	55 1f       	adc	r21, r21
 5dc:	62 9f       	mul	r22, r18
 5de:	f0 01       	movw	r30, r0
 5e0:	72 9f       	mul	r23, r18
 5e2:	bb 27       	eor	r27, r27
 5e4:	f0 0d       	add	r31, r0
 5e6:	b1 1d       	adc	r27, r1
 5e8:	63 9f       	mul	r22, r19
 5ea:	aa 27       	eor	r26, r26
 5ec:	f0 0d       	add	r31, r0
 5ee:	b1 1d       	adc	r27, r1
 5f0:	aa 1f       	adc	r26, r26
 5f2:	64 9f       	mul	r22, r20
 5f4:	66 27       	eor	r22, r22
 5f6:	b0 0d       	add	r27, r0
 5f8:	a1 1d       	adc	r26, r1
 5fa:	66 1f       	adc	r22, r22
 5fc:	82 9f       	mul	r24, r18
 5fe:	22 27       	eor	r18, r18
 600:	b0 0d       	add	r27, r0
 602:	a1 1d       	adc	r26, r1
 604:	62 1f       	adc	r22, r18
 606:	73 9f       	mul	r23, r19
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	62 1f       	adc	r22, r18
 60e:	83 9f       	mul	r24, r19
 610:	a0 0d       	add	r26, r0
 612:	61 1d       	adc	r22, r1
 614:	22 1f       	adc	r18, r18
 616:	74 9f       	mul	r23, r20
 618:	33 27       	eor	r19, r19
 61a:	a0 0d       	add	r26, r0
 61c:	61 1d       	adc	r22, r1
 61e:	23 1f       	adc	r18, r19
 620:	84 9f       	mul	r24, r20
 622:	60 0d       	add	r22, r0
 624:	21 1d       	adc	r18, r1
 626:	82 2f       	mov	r24, r18
 628:	76 2f       	mov	r23, r22
 62a:	6a 2f       	mov	r22, r26
 62c:	11 24       	eor	r1, r1
 62e:	9f 57       	subi	r25, 0x7F	; 127
 630:	50 40       	sbci	r21, 0x00	; 0
 632:	9a f0       	brmi	.+38     	; 0x65a <__mulsf3_pse+0x88>
 634:	f1 f0       	breq	.+60     	; 0x672 <__mulsf3_pse+0xa0>
 636:	88 23       	and	r24, r24
 638:	4a f0       	brmi	.+18     	; 0x64c <__mulsf3_pse+0x7a>
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	bb 1f       	adc	r27, r27
 640:	66 1f       	adc	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	91 50       	subi	r25, 0x01	; 1
 648:	50 40       	sbci	r21, 0x00	; 0
 64a:	a9 f7       	brne	.-22     	; 0x636 <__mulsf3_pse+0x64>
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	51 05       	cpc	r21, r1
 650:	80 f0       	brcs	.+32     	; 0x672 <__mulsf3_pse+0xa0>
 652:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_inf>
 656:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	e4 f3       	brlt	.-8      	; 0x656 <__mulsf3_pse+0x84>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	d4 f3       	brlt	.-12     	; 0x656 <__mulsf3_pse+0x84>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	e7 95       	ror	r30
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	c1 f7       	brne	.-16     	; 0x662 <__mulsf3_pse+0x90>
 672:	fe 2b       	or	r31, r30
 674:	88 0f       	add	r24, r24
 676:	91 1d       	adc	r25, r1
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <__itoa_ncheck>:
 680:	bb 27       	eor	r27, r27
 682:	4a 30       	cpi	r20, 0x0A	; 10
 684:	31 f4       	brne	.+12     	; 0x692 <__itoa_ncheck+0x12>
 686:	99 23       	and	r25, r25
 688:	22 f4       	brpl	.+8      	; 0x692 <__itoa_ncheck+0x12>
 68a:	bd e2       	ldi	r27, 0x2D	; 45
 68c:	90 95       	com	r25
 68e:	81 95       	neg	r24
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	0c 94 4c 03 	jmp	0x698	; 0x698 <__utoa_common>

00000696 <__utoa_ncheck>:
 696:	bb 27       	eor	r27, r27

00000698 <__utoa_common>:
 698:	fb 01       	movw	r30, r22
 69a:	55 27       	eor	r21, r21
 69c:	aa 27       	eor	r26, r26
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	aa 1f       	adc	r26, r26
 6a4:	a4 17       	cp	r26, r20
 6a6:	10 f0       	brcs	.+4      	; 0x6ac <__utoa_common+0x14>
 6a8:	a4 1b       	sub	r26, r20
 6aa:	83 95       	inc	r24
 6ac:	50 51       	subi	r21, 0x10	; 16
 6ae:	b9 f7       	brne	.-18     	; 0x69e <__utoa_common+0x6>
 6b0:	a0 5d       	subi	r26, 0xD0	; 208
 6b2:	aa 33       	cpi	r26, 0x3A	; 58
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <__utoa_common+0x20>
 6b6:	a9 5d       	subi	r26, 0xD9	; 217
 6b8:	a1 93       	st	Z+, r26
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	79 f7       	brne	.-34     	; 0x69c <__utoa_common+0x4>
 6be:	b1 11       	cpse	r27, r1
 6c0:	b1 93       	st	Z+, r27
 6c2:	11 92       	st	Z+, r1
 6c4:	cb 01       	movw	r24, r22
 6c6:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <strrev>

000006ca <strrev>:
 6ca:	dc 01       	movw	r26, r24
 6cc:	fc 01       	movw	r30, r24
 6ce:	67 2f       	mov	r22, r23
 6d0:	71 91       	ld	r23, Z+
 6d2:	77 23       	and	r23, r23
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <strrev+0x4>
 6d6:	32 97       	sbiw	r30, 0x02	; 2
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <strrev+0x18>
 6da:	7c 91       	ld	r23, X
 6dc:	6d 93       	st	X+, r22
 6de:	70 83       	st	Z, r23
 6e0:	62 91       	ld	r22, -Z
 6e2:	ae 17       	cp	r26, r30
 6e4:	bf 07       	cpc	r27, r31
 6e6:	c8 f3       	brcs	.-14     	; 0x6da <strrev+0x10>
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
